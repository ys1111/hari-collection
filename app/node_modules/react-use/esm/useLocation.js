import { useState, useEffect } from 'react';
import { isClient, on, off } from './util';
var patchHistoryMethod = function (method) {
    var original = history[method];
    history[method] = function (state) {
        var result = original.apply(this, arguments);
        var event = new Event(method.toLowerCase());
        event.state = state;
        window.dispatchEvent(event);
        return result;
    };
};
if (isClient) {
    patchHistoryMethod('pushState');
    patchHistoryMethod('replaceState');
}
var useLocation = function () {
    var buildState = function (trigger) {
        var state = history.state, length = history.length;
        var hash = location.hash, host = location.host, hostname = location.hostname, href = location.href, origin = location.origin, pathname = location.pathname, port = location.port, protocol = location.protocol, search = location.search;
        return {
            trigger: trigger,
            state: state,
            length: length,
            hash: hash,
            host: host,
            hostname: hostname,
            href: href,
            origin: origin,
            pathname: pathname,
            port: port,
            protocol: protocol,
            search: search
        };
    };
    var _a = useState(isClient
        ? buildState('load')
        : {
            trigger: 'load',
            length: 1
        }), state = _a[0], setState = _a[1];
    var onChange = function (trigger) {
        return setState(buildState(trigger));
    };
    var onPopstate = function () { return onChange('popstate'); };
    var onPushstate = function () { return onChange('pushstate'); };
    var onReplacestate = function () { return onChange('replacestate'); };
    useEffect(function () {
        on(window, 'popstate', onPopstate);
        on(window, 'pushstate', onPushstate);
        on(window, 'replacestate', onReplacestate);
        return function () {
            off(window, 'popstate', onPopstate);
            off(window, 'pushstate', onPushstate);
            off(window, 'replacestate', onReplacestate);
        };
    }, []);
    return state;
};
export default useLocation;
