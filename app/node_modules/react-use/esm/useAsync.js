import { useState, useEffect, useCallback } from 'react';
var useAsync = function (fn, deps) {
    if (deps === void 0) { deps = []; }
    var _a = useState({
        loading: true
    }), state = _a[0], set = _a[1];
    var memoized = useCallback(fn, deps);
    useEffect(function () {
        var mounted = true;
        set({
            loading: true
        });
        var promise = memoized();
        promise.then(function (value) {
            if (mounted) {
                set({
                    loading: false,
                    value: value
                });
            }
        }, function (error) {
            if (mounted) {
                set({
                    loading: false,
                    error: error
                });
            }
        });
        return function () {
            mounted = false;
        };
    }, [memoized]);
    return state;
};
export default useAsync;
