import { useState, useEffect, useRef } from 'react';
var useScroll = function (ref) {
    if (process.env.NODE_ENV === 'development') {
        if ((typeof ref !== 'object') || (typeof ref.current === 'undefined')) {
            console.error('`useScroll` expects a single ref argument.');
        }
    }
    var frame = useRef(0);
    var _a = useState({
        x: 0,
        y: 0
    }), state = _a[0], setState = _a[1];
    useEffect(function () {
        var handler = function () {
            cancelAnimationFrame(frame.current);
            frame.current = requestAnimationFrame(function () {
                if (ref.current) {
                    setState({
                        x: ref.current.scrollLeft,
                        y: ref.current.scrollTop
                    });
                }
            });
        };
        if (ref.current) {
            ref.current.addEventListener('scroll', handler, {
                capture: false,
                passive: true
            });
        }
        return function () {
            if (frame.current) {
                cancelAnimationFrame(frame.current);
            }
            if (ref.current) {
                ref.current.removeEventListener('scroll', handler);
            }
        };
    }, [ref.current]);
    return state;
};
export default useScroll;
